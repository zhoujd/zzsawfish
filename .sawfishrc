;;;This is sawfish configure for zhoujd
;;;Create by zhoujd on 20120803

;;zzsawfish home
(setq zzsawfish-path "~/zzsawfish/")

;;add load-path
(setq load-path (cons (concat zzsawfish-path "lisp") load-path))

;; Load Modules
(require 'sawfish.wm.viewport)
(require 'sawfish.wm.menus)
(require 'iswitch-window)
(require 'jump-or-exec)
(require 'rep.io.timers)

(setq capture-menu  
      '(("current window"  (capture-this-window))  
        ("region"          (capture-region))  
        ("full screen"     (capture-root-window))))

;;font set
(setq default-font (get-font "-*-Microsoft YaHei Mono-medium-r-*-*-14-*-*-*-*-*-*-*"))

;;set frame default style
(setq default-frame-style 'Crux)

;;set backgound
(setq list-wallpaper '("warty-final-ubuntu.png" "ubuntu-boot.png"))
(defun rand-wallpaper ()
  (let ((timer))
    (system (format nil "feh --bg-fill %s%s%s" zzsawfish-path "wallpaper/"
                    (nth (random (length list-wallpaper)) list-wallpaper)))
    (setq timer (make-timer
                 (lambda ()
                   (rand-wallpaper)
                   (delete-timer timer)
                   ) 30))))

(system (concat "feh --bg-fill " zzsawfish-path "wallpaper/" (nth 1 list-wallpaper) " &"))

;;capture screen
(defun capture-root-window ()  
  "capture root window"  
  (interactive)  
  (system "import -window root shot.png; display shot.png&"))  

(defun capture-this-window ()  
  "capture active window"  
  (interactive)  
  (let ((w (current-event-window)))  
    (when w  
      (display-message (concat "import -window "  
                        (prin1-to-string (window-id w)) " window.png"))  
      (system (concat "import -window "  
                      (prin1-to-string (window-id w)) " window.png"))  
      (system "display window.png&"))))  

(defun capture-region ()  
  "capture region"  
  (interactive)  
  (let ((process (make-process standard-output)  
    (start-process process "import" "capture.png")))))  

;;set start program
(define startup-programs  
  '(("gnome-panel")
    ("nm-applet")
    ("bluetooth-applet")
    ("xscreensaver" "-no-splash")
    ("/usr/lib/vino/vino-server" "--sm-disable")  ;;for remote desktop
    ("gnome-settings-daemon")   ;;for ubuntu 11.04 use gtk
    ("gnome-keyring-daemon" "--start --components=pkcs11") ;;/etc/xdg/autostart/gnome-keyring-pkcs11.desktop
    ("numlockx")
    ))

(add-hook 'before-exit-hook  
          (lambda ()  
            (mapc stop-process (active-processes))))

(mapc (lambda (program)  
        (apply start-process (make-process standard-output) program))  
      startup-programs) 

(add-hook 'before-exit-hook  
          (lambda ()  
            (mapc stop-process (active-processes))))

;; define functions
(defun backgroundize (string)
  "Append a character `&' to STRING if it is not end with a `&'."
  (let ((len (length string)))
    (if (string= "&" (substring string (- len 1)))
        string
        (concat string " &"))))

(defun show-desktop-toggle ()
  "Show or hide the desktop."
  (if (showing-desktop-p)
      (hide-desktop)
      (show-desktop)))

;; display-message-with-timeout
(defun display-message-with-timeout (message timeout)
  (display-message message)
  (make-timer (lambda () (display-message nil)) timeout))

;; iconify-all-windows
(defun iconify-all-windows ()
  (map-windows iconify-window))

;; close-all-windows
(defun close-all-windows ()
  (map-windows delete-window))

(setq apps-menu-autogen   nil)
(setq workspace-names     '("work")) 
(setq decorate-transients t)
(setq place-window-mode   'first-fit)

(setq root-menu
      '(("Windows"    . window-menu)
        ("Workspaces" . workspace-menu)
        ("Programs"   . apps-menu)
        ("Customize"  . custom-menu)
        ("About..."   (customize 'about))
        ()
        ("Restart"    restart)
        ("Quit"       quit)))

(setq apps-menu  
      '(("Terminal"   (system "gnome-terminal &"))  
        ("Emacs"      (system "emacs &"))  
        ("Firefox"    (system "firefox &"))  
        ("Bcompare"   (system "bcompare &"))
        ("Evince"     (system "evince &"))
        ("Monitor"    (system "gnome-system-monitor &"))
        ("Gcolor2"    (system "gcolor2 &"))  
        ("Gcalctool"  (system "gcalctool &"))
        ("Capture"    (popup-menu capture-menu))  
        ()
        ("Run"        (system "gmrun &"))
        ("Lock"       (system "xscreensaver-command -lock &"))
        )) 

;;wm modifier value
(custom-set-typed-variable (quote wm-modifier-value) (quote (super)) (quote modifier-list))

;; Rootwindow Keybindings
(bind-keys root-window-keymap
           "Button2-Click" 'popup-window-list-menu
           "Button3-Click" 'popup-root-menu)

(bind-keys window-keymap      "Meta-F10"       'maximize-window-fullscreen-toggle)

(bind-keys global-keymap
           "W-TAB"   'cycle-windows
           "W-Right" 'next-workspace
           "W-Left"  'previous-workspace
           "W-Down"  'lower-window
           "W-Up"    'raise-window

           ;;window 
           "W-F1"    'popup-root-menu
           "W-F2"    '(system "gmrun &")
           "W-F3"    '(show-desktop-toggle)
           "W-F4"    '(delete-window (current-event-window))

           "W-F10"   '(maximize-window-toggle (current-event-window))

           "W-0"     'iswitch-window

           "W-Menu"  'popup-window-menu
           "C-Menu"  'popup-root-menu
           "S-Menu"  'popup-apps-menu
           
           "W-Home"  '(jump-or-exec "Nautilus" "nautilus --no-desktop ~" t)
           "W-l"     '(system "xscreensaver-command -lock &")
           "W-x"     '(system "xkill &"))

;;for run special program
(define exec-keymap (make-keymap))
(bind-keys global-keymap "W-e" exec-keymap)
(bind-keys exec-keymap
           "e"    '(system "emacs &")
           "t"    '(system "gnome-terminal &")
           "n"    '(system "nautilus --no-desktop ~ &")
           "f"    '(jump-or-exec "Firefox" "firefox")
           "b"    '(jump-or-exec "Beyond Compare" "bcompare")           
           "g"    '(jump-or-exec "Geany" "geany" t)
           "G"    '(jump-or-exec "GPRename" "gprename" nil)
           
           "F2"   '(system "gksu &")
           "F9"   '(jump-or-exec "Synaptic" "gksu -u root synaptic" nil)
           "F10"  '(jump-or-exec "Gtkorphan" "gksu -u root gtkorphan" t)
           "F11"  '(system "gksu -u root /etc/init.d/network-manager restart &")
           "F12"  '(system "gksu -u root /etc/init.d/privoxy restart &"))

;;for menus control
(define menus-keymap (make-keymap))
(bind-keys global-keymap "W-m" menus-keymap)
(bind-keys menus-keymap
           "1"    'popup-root-menu
           "2"    'popup-window-menu
           "3"    'popup-apps-menu)

;; Workspace Keymacros
(define ws-keymap (make-keymap))
(bind-keys global-keymap "W-w" ws-keymap)

(bind-keys ws-keymap
           "Left"  'workspace-left
           "Up"    'workspace-up
           "Right" 'workspace-right
           "Down"  'workspace-down)

;; Viewport keymacros
(define vp-keymap (make-keymap))
(bind-keys global-keymap "W-v" vp-keymap)

(bind-keys vp-keymap
           "Left"  '(move-viewport -1  0)
           "Up"    '(move-viewport  0 -1)
           "Right" '(move-viewport  1  0)
           "Down"  '(move-viewport  0  1))

(bind-keys window-keymap
           "W-F4"  'delete-window-safely
           "W-F5"  'destroy-window
           "C-W-m" 'maximize-window
           "C-W-w" 'unmaximize-window
           "C-W-s" 'shade-window
           "C-W-u" 'unshade-window
           "C-W-i" 'iconify-window
           "C-W-r" 'raise-window
           "C-W-l" 'lower-window
           "C-W-R" 'raise-window-depth
           "C-W-L" 'lower-window-depth
           "C-W-f" 'maximize-window-fullscreen
           "C-W-v" 'maximize-window-vertically
           "C-W-h" 'maximize-window-horizontally
           "C-W-y" 'move-window-interactively
           "C-W-x" 'resize-window-interactively
           )

;;;~/.sawfishrc end here
